apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-startup
  namespace: analytics
  labels:
    app.kubernetes.io/name: superset-analytics
    app.kubernetes.io/component: config
data:
  startup.sh: |
    #!/bin/bash
    set -e
    
    echo "Updating package lists..."
    apt-get update -qq
    
    echo "Installing Redis..."
    DEBIAN_FRONTEND=noninteractive apt-get install -y redis-server
    
    echo "Installing OIDC dependencies..."
    pip install Authlib>=1.2.0 requests
    
    echo "Starting Redis server..."
    redis-server --daemonize yes --bind 127.0.0.1 --port 6379 --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    echo "Waiting for Redis to start..."
    sleep 5
    
    # Test Redis connection
    redis-cli ping || (echo "Redis failed to start" && exit 1)
    
    echo "Setting up Superset environment..."
    export SUPERSET_CONFIG_PATH=/app/pythonpath/superset_config.py
    export PYTHONPATH=/app/pythonpath:$PYTHONPATH
    export AUTHLIB_INSECURE_TRANSPORT=1  # For sandbox environment
    
    # Create config directory
    mkdir -p /app/pythonpath
    
    # Create DOME OIDC Security Manager
    cat > /app/pythonpath/dome_oidc_security_manager.py << 'EOF'
    import logging
    import json
    from superset.security import SupersetSecurityManager
    
    logger = logging.getLogger(__name__)
    
    class DOMEOIDCSecurityManager(SupersetSecurityManager):
        
        def oauth_user_info(self, provider, response=None):
            """Extract user info from DOME OIDC response"""
            
            if provider == 'dome':
                logger.info("Processing DOME OIDC user info")
                
                try:
                    # Get user info from the userinfo endpoint
                    me = self.appbuilder.sm.oauth_remotes[provider].get('oidc/userinfo')
                    
                    if hasattr(me, 'json'):
                        user_data = me.json()
                    else:
                        user_data = me.data if hasattr(me, 'data') else {}
                    
                    logger.info(f"User data received from DOME")
                    
                    # Handle DOME's VC structure with LEAR credentials
                    sub = user_data.get('sub', '')
                    email = user_data.get('email')
                    
                    # Extract from Verifiable Credential if present
                    if 'vc' in user_data:
                        vc = user_data.get('vc', {})
                        credential_subject = vc.get('credentialSubject', {})
                        mandate = credential_subject.get('mandate', {})
                        mandatee = mandate.get('mandatee', {})
                        
                        if not email:
                            email = mandatee.get('email')
                        
                        first_name = mandatee.get('first_name', 'DOME')
                        last_name = mandatee.get('last_name', 'User')
                    else:
                        # Standard OIDC claims
                        first_name = user_data.get('given_name', 'DOME')
                        last_name = user_data.get('family_name', 'User')
                    
                    # Create username from DID or email
                    if sub.startswith('did:'):
                        username = sub.split(':')[-1][:30]  # Use last part of DID
                    elif email:
                        username = email.split('@')[0]
                    else:
                        username = 'dome_user'
                    
                    if not email:
                        email = f"{username}@dome-marketplace-sbx.org"
                    
                    user_info = {
                        'username': username,
                        'email': email,
                        'first_name': first_name,
                        'last_name': last_name,
                        'id': sub,
                    }
                    
                    logger.info(f"User {username} authenticated successfully")
                    return user_info
                    
                except Exception as e:
                    logger.error(f"Error processing DOME user info: {str(e)}")
                    # Return minimal info to allow login
                    return {
                        'username': 'dome_user',
                        'email': 'user@dome-marketplace-sbx.org',
                        'first_name': 'DOME',
                        'last_name': 'User',
                        'id': 'unknown'
                    }
            
            return super().oauth_user_info(provider, response)
    EOF
    
    # Create superset config with DOME OIDC
    cat > /app/pythonpath/superset_config.py << 'EOF'
    import os
    import logging
    from flask_appbuilder.security.manager import AUTH_OAUTH
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    # Database - using SQLite with persistent storage
    SQLALCHEMY_DATABASE_URI = 'sqlite:////app/data/superset.db'
    
    # Redis configuration
    REDIS_HOST = '127.0.0.1'
    REDIS_PORT = 6379
    
    # Celery configuration
    CELERY_CONFIG = {
        'broker_url': f'redis://{REDIS_HOST}:{REDIS_PORT}/0',
        'result_backend': f'redis://{REDIS_HOST}:{REDIS_PORT}/0',
        'worker_log_level': 'INFO',
        'worker_prefetch_multiplier': 1,
        'task_acks_late': True,
    }
    
    # Cache configuration
    CACHE_CONFIG = {
        'CACHE_TYPE': 'RedisCache',
        'CACHE_REDIS_HOST': REDIS_HOST,
        'CACHE_REDIS_PORT': REDIS_PORT,
        'CACHE_REDIS_DB': 1,
        'CACHE_DEFAULT_TIMEOUT': 300,
    }
    
    # Security
    #SECRET_KEY = 'your-secret-key-change-in-production'
    #WTF_CSRF_ENABLED = True
    #WTF_CSRF_EXEMPT_LIST = []
    
    # Set the authentication type to OAuth
    AUTH_TYPE = AUTH_OAUTH
    
    # DOME OIDC Configuration
    OAUTH_PROVIDERS = [
    {   
        'name': 'dome',
        'token_key': 'access_token',
        'icon': 'fa-address-card',
        'remote_app': {
            'client_id': 'did:key:zDnaer6wstrAhZxM5ej7fvQbnf9aP3RdojhXEao431SMrN3Lb',
            'client_secret': None,
            'client_kwargs': {
                'scope': 'openid_learcredential',
            },
            'access_token_method': 'POST',
            'api_base_url': 'https://verifier.dome-marketplace-sbx.org/',
            'access_token_url': 'https://verifier.dome-marketplace-sbx.org/oidc/token',
            'authorize_url': 'https://verifier.dome-marketplace-sbx.org/oidc/authorize',
        }
    }
]
    
    # Custom Security Manager for DOME
    from dome_oidc_security_manager import DOMEOIDCSecurityManager
    CUSTOM_SECURITY_MANAGER = DOMEOIDCSecurityManager
    
    # User registration
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Public"
    
    # Session configuration
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_DOMAIN = None  # Let Flask handle it
    
    # Allow iframe embedding if needed
    TALISMAN_ENABLED = False
    
    # Enable proxy headers
    ENABLE_PROXY_FIX = True
    
    # Feature flags
    FEATURE_FLAGS = {
        'ENABLE_TEMPLATE_PROCESSING': True,
    }
    
    # Load examples
    SUPERSET_LOAD_EXAMPLES = True
    
    # Webserver config
    SUPERSET_WEBSERVER_PORT = 8088
    SUPERSET_WEBSERVER_ADDRESS = '0.0.0.0'
    
    logger.info("DOME OIDC SSO configuration loaded")
    EOF
    
    # Ensure data directory exists
    mkdir -p /app/data
    
    echo "Initializing Superset database..."
    superset db upgrade
    
    echo "Creating admin user..."
    superset fab create-admin \
        --username admin \
        --firstname Admin \
        --lastname User \
        --email admin@example.com \
        --password admin 2>/dev/null || echo "Admin user may already exist"
    
    echo "Loading examples..."
    superset load_examples 2>/dev/null || echo "Examples may already be loaded"
    
    echo "Initializing Superset..."
    superset init
    
    echo "Starting Celery worker in background..."
    nohup celery --app=superset.tasks.celery_app:app worker --loglevel=info > /tmp/celery.log 2>&1 &
    
    echo "Waiting for Celery to start..."
    sleep 10
    
    echo "Starting Superset web server..."
    exec superset run -h 0.0.0.0 -p 8088 --with-threads
