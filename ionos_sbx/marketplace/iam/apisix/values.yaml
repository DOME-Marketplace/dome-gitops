apisix:
  controlPlane:
    enabled: true
    # -- resource preset to small to have sufficient memory
    resourcesPreset: small
  ingressController:
    # -- not required, since ingress happens through the nginx
    enabled: false
  # -- configuration in regard to the apisix etcd
  etcd:
    # -- should it be enabled
    enabled: true   
  # -- configuration in regard to the apisix dashboard
  dashboard:
    # -- configure consumers and there keys
    enabled: false
  # -- configuration in regard to the apisix dataplane
  dataPlane:
    # -- resource preset to have sufficient memory
    resourcesPreset: small
    # -- reloads apisix to allow env var usage in config giles
    lifecycleHooks:
      postStart:
        exec:
          command: ["/bin/sh", "-c", "apisix reload"]
    extraConfig:
      deployment:
        # -- allows to configure apisix through a yaml file
        role_data_plane:
          config_provider: yaml
    # -- configure ingress and tls through the ingress-controller
    ingress:
      enabled: true
      hostname: tmforum.dome-marketplace-sbx.org
      ingressClassName: nginx
      tls: true
      pathType: Prefix
      annotations: 
        cert-manager.io/cluster-issuer: letsencrypt-sbx-issuer
    # -- we need `routes` to declaratively configure the routes
    extraVolumes:
      - name: routes
        configMap:
          name: apisix-routes
    extraVolumeMounts:
      - name: routes
        mountPath: /usr/local/apisix/conf/apisix.yaml
        subPath: apisix.yaml
    extraEnvVars:
      # -- env var read from the secret
      - name: FICODES_API_KEY
        valueFrom:
          secretKeyRef:
            name: ficodes-apikey-secret
            key: API_KEY
      - name: EURODYN_API_KEY
        valueFrom:
          secretKeyRef:
            name: eurodyn-apikey-secret
            key: API_KEY
  consumers:
    # -- name of the consumer to be created
    - name: ficodes
      # -- env var that provides the API Key, needs to match the extraEnvVarsSecret containing the actual key
      varName: FICODES_API_KEY
    - name: eurodyn
      # -- env var that provides the API Key, needs to match the extraEnvVarsSecret containing the actual key
      varName: EURODYN_API_KEY 
  # -- configure the routes to be made available with the api-key plugin enabled. Keys then need to be assigned through the dashboard
  routes:
    - uri: /party-catalog/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-party-catalog:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/party-catalog/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /customer-bill-management/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-customer-bill-management:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/customer-bill-management/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /product-catalog/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-product-catalog:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/product-catalog/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /product-inventory/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-product-inventory:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/product-inventory/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /product-ordering-management/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-product-ordering-management:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/product-ordering-management/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /resource-catalog/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-resource-catalog:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/resource-catalog/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /resource-function-activation/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-resource-function-activation:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/resource-function-activation/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /resource-inventory/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-resource-inventory:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/resource-inventory/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /service-catalog/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-service-catalog:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/service-catalog/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /account/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-account:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/account/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /agreement/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-agreement:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/agreement/(.*)","/$1"]
        key-auth:
          header: api-key
    - uri: /usage-management/*
      methods: ["GET"]
      upstream:
        nodes:
            tm-forum-api-usage-management:8080: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          regex_uri: ["^/usage-management/(.*)","/$1"]
        key-auth:
          header: api-key