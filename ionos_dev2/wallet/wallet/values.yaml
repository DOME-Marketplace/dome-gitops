dome-wallet:
  ## configuration for the wallet-api
  dome-wallet-api:
    # -- should be enabled?
    enabled: true
    # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
    fullnameOverride: dome-wallet-api
    image:
      repository: in2workspace/in2-wallet-api
      # Overrides the image tag whose default is the chart appVersion.
      tag: v1.4.2
      pullPolicy: Always
    ingress:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-dev2-issuer
      hosts:
        - host: wallet.dome-marketplace-dev2.org
          paths:
            - path: /wallet-api
              pathType: Prefix
      tls:
        - hosts:
            - wallet.dome-marketplace-dev2.org
          secretName: wallet-secret-tls
    ## deployment specific configuration
    app:
      profile: test
      internalServerPort: 8080
      logLevel: INFO
      basePath: /wallet-api
      authServer:
        external:
          scheme: https
          domain: wallet.dome-marketplace-dev2.org
          port: 443
          path: /keycloak/realms/wallet
        internal:
          scheme: http
          domain: dome-wallet-keycloak
          port: 8080
          path: /keycloak/realms/wallet
        jwtDecoderPath: /protocol/openid-connect/certs
      ebsiTest:
        url: http://dome-wallet-keycloak:8080/keycloak/realms/wallet/protocol/openid-connect/token
        client:
          id: user-registry-client
          existingSecret:
            # -- should an existing secret be used
            enabled: true
            # -- name of the secret
            name: wallet-secret
            # -- key to retrieve the password from
            key: client-secret
        userData:
          name: admin
          existingSecret:
            # -- should an existing secret be used
            enabled: true
            # -- name of the secret
            name: wallet-secret
            # -- key to retrieve the password from
            key: user-password
      vault:
        provider: hashicorp
        # host needs to match with the service name of the vault server
        host: wallet-vault-server # fullnameOverride: wallet-vault
        scheme: http
        port: 8200
        # cambiar por valores dummy
        existingSecret:
          # -- should an existing secret be used
          enabled: true
          # -- name of the secret
          name: wallet-vault-unseal-secret
          # -- key to retrieve the token from
          key: root
    db:
      externalService: false
      schema: wallet
      host: wallet-postgres
      port: 5432
      name: wallet
      username: postgres
      password: postgres
      existingSecret:
        enabled: true
        name: wallet-secret
        key: db-password

  ## configuration for the dome-wallet-ui
  dome-wallet-ui:
    image:
      repository: in2workspace/in2-wallet-ui
      pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
      tag: v1.8.0
    # -- should be enabled?
    enabled: true
    # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
    fullnameOverride: dome-wallet-ui
    ## ingress specific configuration
    ingress:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-dev2-issuer
      hosts:
        - host: wallet.dome-marketplace-dev2.org
          paths:
            - path: /
              pathType: Prefix
      tls:
        - hosts:
            - wallet.dome-marketplace-dev2.org
          secretName: wallet-secret-tls
    ## deployment specific configuration
    app:
      internalServerPort: 8080
      colors:
        primary: "#00ADD3"
        primaryContrast: "#ffffff"
        secondary: "#50c8ff"
        secondaryContrast: "#000000"
      logoSrc: "assets/logos/dome_white_logo.png"
      walletApi:
        # Este internalDomain es en realidad el external
        internalDomain: https://wallet.dome-marketplace-dev2.org/wallet-api
        # ws = sin certificado, wss = con certificado
        websocketExternalDomain: wss://wallet.dome-marketplace-dev2.org/wallet-api
      #        websocketPath: /api/v1/pin
      #        executeContentPath: /api/v1/execute-content
      #        requestCredentialPath: /api/v1/request-credential
      #        verifiablePresentationPath: /api/v1/vp
      #        credentialsPath: /api/v1/credentials
      #        credentialsByIdPath: /api/v1/credentials?credentialId=
      #        requestSignedCredentialPath: /api/v1/request-signed-credential
      #        cborPath: /api/v1/vp/cbor
      iam:
        external_domain: https://wallet.dome-marketplace-dev2.org/keycloak
  #        realm_path: /realms/wallet

  ## configuration for the dome-wallet-keycloak
  dome-wallet-keycloak:
    image:
      repository: in2workspace/dome-wallet-keycloak
      pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
      tag: v1.0.2
    # -- should be enabled?
    enabled: true
    # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
    fullnameOverride: dome-wallet-keycloak
    podAnnotations:
      # This annotation tells Velero to back up the volume mounted as 'data' in the Keycloak pod.
      # Make sure the volumeMount inside the Keycloak deployment is named 'data'.
      backup.velero.io/backup-volumes: data
    # -- Added because the rollout is not working
    readinessProbe:
      path: /keycloak/health
    # -- Added because the rollout is not working
    livenessProbe:
      path: /keycloak/health
    ## ingress specific configuration
    ingress:
      enabled: true
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-dev2-issuer
      hosts:
        - host: wallet.dome-marketplace-dev2.org
          paths:
            - path: /keycloak
              pathType: Prefix
      tls:
        - hosts:
            - wallet.dome-marketplace-dev2.org
          secretName: wallet-secret-tls
    ## deployment specific configuration
    app:
      internalServerPort: 8080
      keycloak:
        hostnameUrl: "https://wallet.dome-marketplace-dev2.org/keycloak"
        adminUrl: "https://wallet.dome-marketplace-dev2.org/keycloak"
        relativePath: "/keycloak/"
        admin: admin
        existingSecret:
          # -- should an existing secret be used
          enabled: true
          # -- name of the secret
          name: wallet-secret
          # -- key to retrieve the password from
          key: keycloak-password
    db:
      type: postgres
      host: dome-wallet-keycloak-postgres
      port: 5432
      externalService: true
      name: keycloak
      username: postgres
      existingSecret:
        # -- should an existing secret be used
        enabled: true
        # -- name of the secret
        name: wallet-secret
        # -- key to retrieve the password from
        key: keycloak-db-password

  ## configuration of postgres to be used for the blockchain-connector - see https://github.com/bitnami/charts/tree/main/bitnami/postgresql for details
  postgresql:
    # -- should the postgresql deployment be enabled
    enabled: true
    # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
    fullnameOverride: dome-wallet-keycloak-postgres
    # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
    nameOverride: dome-wallet-keycloak-postgres
    ## auth configuration for the database
    auth:
      # -- username to be used
      username: postgres
      # -- password to be used
      password: postgres
      # -- should the default postgres user be enabled
      enablePostgresUser: true
      # -- existing secret
      existingSecret: wallet-secret
      secretKeys:
        adminPasswordKey: keycloak-db-password
        userPasswordKey: keycloak-db-password
    ## configuration of the postgres primary replica
    primary:
      # this label indicates to Velero that a backup has to be done for the PVC
      persistence:
        labels:
          backup: "true"
      ## provide db initialization
      initdb:
        ## provide scripts for initialization
        scripts:
          # -- create the database as expected by the blockchain-connector
          create.sh: |
            psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE keycloak;"

    ## configuration of postgres
  wallet-postgresql:
    # -- should the postgresql deployment be enabled
    enabled: true
    auth:
      # -- username to be used
      username: postgres
      # -- should the default postgres user be enabled
      enablePostgresUser: true
      # -- password to be used
      existingSecret: wallet-secret
      secretKeys:
        adminPasswordKey: db-password
        userPasswordKey: db-password

  wallet-external-database:
    # -- should the postgresql deployment be enabled
    enabled: false