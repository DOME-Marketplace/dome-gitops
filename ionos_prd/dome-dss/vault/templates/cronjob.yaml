apiVersion: batch/v1
kind: CronJob
metadata:
  name: dome-dss-vault-check-cronjob
  labels:
    app: {{ .Release.Name }}
spec:
  schedule: "*/5 * * * *"  # Run every 5 minutes
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 0  # Delete job immediately after completion
      template:
        spec:
          serviceAccountName: vault-check-sa
          containers:
            - name: vault-check
              image: bitnami/kubectl:latest
              command: ["/bin/sh", "-c"]
              args:
                - |
                  #!/bin/sh

                  NAMESPACE="{{ .Values.namespace }}"
                  UNSEALSECRET="{{ .Values.unsealSecretName }}"

                  echo "Initializing check..."

                  # Get the Vault pod name
                  VAULT_POD_NAME="{{ .Values.vaultPodName }}"

                  echo "Vault pod name: $VAULT_POD_NAME"

                  QUICK_STATUS=$(kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c "vault status -format=json" 2>/dev/null)
                  if [ -n "$QUICK_STATUS" ]; then
                    INITIALIZED=$(echo "$QUICK_STATUS" | jq -r '.initialized')
                    SEALED=$(echo "$QUICK_STATUS" | jq -r '.sealed')
                    if [ "$INITIALIZED" = "true" ] && [ "$SEALED" = "false" ]; then
                      echo "Vault is already initialized and unsealed. Exiting script."
                      exit 0
                    fi
                  fi
                  echo "Proceeding with Vault check..."

                  # Check Vault status
                  STATUS=$(kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c "vault status 2>&1")
                  if [ -z "$STATUS" ]; then
                    echo "No Vault status. That means the Vault is not initialized"
                    INITIALIZED="false"
                    SEALED="true"
                  fi

                  # Function to check unseal status
                  check_unseal_status() {
                    kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c "vault status" | grep 'Sealed' | awk '{print $2}'
                  }

                  echo "Status: $STATUS"

                  # Extract Vault initialization and seal status
                  INITIALIZED=$(echo "$STATUS" | grep 'Initialized' | awk '{print $2}')
                  SEALED=$(echo "$STATUS" | grep 'Sealed' | awk '{print $2}')

                  # Check if the variables were correctly assigned
                  if [ -z "$INITIALIZED" ] || [ -z "$SEALED" ]; then
                    echo "Error: Could not determine Vault status from the output."
                    exit 1
                  fi

                  echo "Vault status: Initialized=$INITIALIZED, Sealed=$SEALED"

                  if [ "$INITIALIZED" = "false" ] && [ "$SEALED" = "true" ]; then
                    echo "Vault is not initialized and is sealed. Proceeding to initialize Vault..."

                    # Initialize Vault
                    kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c 'vault operator init -format=json > /dev/shm/vault_init.json'

                    # Extract unseal keys and root token from the JSON file using awk
                    UNSEAL_KEYS=$(kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c 'awk '\''/"unseal_keys_b64": \[/{flag=1; next} /],/{flag=0} flag'\'' /dev/shm/vault_init.json')
                    ROOT_TOKEN=$(kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c 'awk -F\" "/root_token/{print \$4}" /dev/shm/vault_init.json')

                    if [ -z "$UNSEAL_KEYS" ] || [ -z "$ROOT_TOKEN" ]; then
                      echo "Error: Failed to retrieve unseal keys or root token."
                      exit 1
                    fi

                    # Decode the unseal keys
                    UNSEAL_KEY_1=$(echo "$UNSEAL_KEYS" | head -n 1 | tr -d '", ')
                    UNSEAL_KEY_2=$(echo "$UNSEAL_KEYS" | sed -n '2p' | tr -d '", ')
                    UNSEAL_KEY_3=$(echo "$UNSEAL_KEYS" | sed -n '3p' | tr -d '", ')
                    UNSEAL_KEY_4=$(echo "$UNSEAL_KEYS" | sed -n '4p' | tr -d '", ')
                    UNSEAL_KEY_5=$(echo "$UNSEAL_KEYS" | tail -n 1 | tr -d '", ')

                    # Create a new Kubernetes Secret with the unseal keys
                    kubectl create secret generic "$UNSEALSECRET" \
                      --from-literal=unseal_key_1="$UNSEAL_KEY_1" \
                      --from-literal=unseal_key_2="$UNSEAL_KEY_2" \
                      --from-literal=unseal_key_3="$UNSEAL_KEY_3" \
                      --from-literal=unseal_key_4="$UNSEAL_KEY_4" \
                      --from-literal=unseal_key_5="$UNSEAL_KEY_5" \
                      --from-literal=root="$ROOT_TOKEN" \
                      --namespace "$NAMESPACE"

                    # Try to unseal with each key until the Vault is unsealed
                    for key in "$UNSEAL_KEY_1" "$UNSEAL_KEY_2" "$UNSEAL_KEY_3" "$UNSEAL_KEY_4" "$UNSEAL_KEY_5"; do
                      kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c "vault operator unseal $key"
                      sealed_status=$(check_unseal_status)
                      echo "Sealed status: $sealed_status"
                      if [ "$sealed_status" = "false" ]; then
                        echo "Vault successfully unsealed."
                        break
                      fi
                    done

                    # Verify if the Vault is still sealed after trying all keys
                    if [ "$sealed_status" = "true" ]; then
                      echo "Failed to unseal the Vault with the provided keys."
                    fi

                    echo "Vault initialized and unseal keys stored in Kubernetes Secret."

                    kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c "vault login $ROOT_TOKEN"

                    kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c "vault secrets enable -version=1 kv"

                    echo "Secret engine enable."
                  fi

                  if [ "$INITIALIZED" = "true" ] && [ "$SEALED" = "true" ]; then
                    echo "Vault is initialized and sealed. Proceeding to unseal Vault..."

                    # Extract unseal keys from Kubernetes Secrets
                    UNSEAL_KEY_1=$(kubectl get secret "$UNSEALSECRET" -n "$NAMESPACE" -o jsonpath='{.data.unseal_key_1}' | base64 --decode)
                    UNSEAL_KEY_2=$(kubectl get secret "$UNSEALSECRET" -n "$NAMESPACE" -o jsonpath='{.data.unseal_key_2}' | base64 --decode)
                    UNSEAL_KEY_3=$(kubectl get secret "$UNSEALSECRET" -n "$NAMESPACE" -o jsonpath='{.data.unseal_key_3}' | base64 --decode)
                    UNSEAL_KEY_4=$(kubectl get secret "$UNSEALSECRET" -n "$NAMESPACE" -o jsonpath='{.data.unseal_key_4}' | base64 --decode)
                    UNSEAL_KEY_5=$(kubectl get secret "$UNSEALSECRET" -n "$NAMESPACE" -o jsonpath='{.data.unseal_key_5}' | base64 --decode)

                    # Try to unseal with each key until the Vault is unsealed
                    for key in "$UNSEAL_KEY_1" "$UNSEAL_KEY_2" "$UNSEAL_KEY_3" "$UNSEAL_KEY_4" "$UNSEAL_KEY_5"; do
                      kubectl exec -n "$NAMESPACE" "$VAULT_POD_NAME" -- /bin/sh -c "vault operator unseal $key"
                      sealed_status=$(check_unseal_status)
                      echo "Sealed status: $sealed_status"
                      if [ "$sealed_status" = "false" ]; then
                        echo "Vault successfully unsealed."
                        break
                      fi
                    done
                  fi

          restartPolicy: OnFailure